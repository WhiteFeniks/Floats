#include <stdlib.h>
#include <stdio.h>
/* Удалить ниже */

int *ft_make_zero_str(int size)
{
    int *s;
    int i;

    i = 0;
    if (size == 0)
        return(0);
    if (!(s = (int *)malloc(sizeof(int) * size)))
        return (NULL);
    while(i < size)
    {
        s[i] = 0;
        i++;
    }
    return(s);
}

int *my_copy_array(const int *x)
{
    int i;
    int *result;
    result = ft_make_zero_str(1100);

    i = 0;
    while (i < 1100)
    {
        result[i] = x[i];
        i++;
    }
    return (result);
}

int    *ft_difference_long_arithmetic(const int *x, const int *y)
{
    int *result;
    int i;
    int count;
    int *temp;

    i = 0;
    result = ft_make_zero_str(1100);
    while  (x[i] == 0)
        i++;
    count = 1100 - i;
    i = 1100;
    temp = my_copy_array(x);
    while (--i >= (1100 - count))
    {
        if (temp[i] < y[i])
        {
            temp[i] += 10;
            temp[i - 1] -= 1;
        }
        result[i] = temp[i] - y[i];
    }
    result[i] = temp[i];
    return(result);
}

int    ft_array_length(int *my_array)
{
    int i;
    int count;

    i = 0;
    count = 0;
    while(my_array[i] == 0)
        i++;
    while (i < 1100)
    {
        i++;
        count++;
    }
    return (count);
}

int *ft_shift_elements_left(int *my_array, int len)
{
    int i;

    i = 0;
    while(my_array[i] == 0)
        i++;
    while (i < 1100)
    {
        my_array[i - len] = my_array[i];
        if (len != 0)
            my_array[i] = 0;
        i++;
    }
    return(my_array);
}

int *ft_shift_elements_right(int *my_array, int len)
{
    int i;

    i = 1100;
    while (my_array[i] == 0)
        i--;
    while (i >= 0)
    {
        my_array[i + len] = my_array[i];
        if (len != 0)
            my_array[i] = 0;
        i--;
    }
    return(my_array);
}
/* Удалить выше */



int *ft_shift_array(int *result_divider, int j)
{
    int i;

    i = 1100;
    while (result_divider[i] == 0)
        i--;
    while (j < i)
    {
        result_divider[j] = result_divider[j + 1];
        result_divider[j + 1] = 0;
        j++;
    }
    return(result_divider);
}

int ft_count_zero(int *result_divider, int k)
{
    int count;
    int i;

    i = k;
    count = 0;
    while (result_divider[i++] == 0)
        count++;
    return (count);
}



int ft_len_num(int x)
{
    int i;

    i = 0;
    while(x / 10 != 0)
    {
        x = x / 10;
        i++;
    }
    return (i);
}
int *ft_row_expansion(int *temp)
{
    int i;
    int k;

    i = 0;
    k = 0;
    while(i < 1100)
    {
        if(temp[i] > 10)
        {
            k = ft_len_num(temp[i]) + 1;
            while(k != 1)
            {
                temp[i - 1] = temp[i] / 10;
                temp[i] = temp[i] % 10;
                k--;
                i--;
            }
        }
        i++;
    }
    return (temp);
}


int *ft_make_two_in_one(int *result_divider)
{
    int i;
    int k;
    int *temp;

    i = 0;
    k = 0;
    temp = ft_make_zero_str(1100);
    while(i < 1100)
    {
        k = k + ft_len_num(result_divider[i]);
        temp[k] = result_divider[i];
        i++;
        k++;
    }
    ft_row_expansion(temp);
    return (temp);
}

int *ft_delete_zero(int *result_divider)
{
    int i;
    int count_zero;
    int k;

    i = 1100;
    while (result_divider[i] == 0)
        i--;
    k = 0;
    while (k <= i)
    {
        while (result_divider[k] != 0)
            k++;
        count_zero = ft_count_zero(result_divider, k);
        if (count_zero != 0)
            ft_shift_array(result_divider, k + count_zero - 1);
        k = k + count_zero - 1;
        i--;
    }
    result_divider = ft_make_two_in_one(result_divider);
    return (result_divider);
}

int *ft_copy_array(const int *x)
{
    int i;
    int *result;
    result = ft_make_zero_str(1100);

    i = 0;
    while (i < 1100)
    {
        result[i] = x[i];
        i++;
    }
    return (result);
}

int ft_comparison(const int *x, const int *y)
{
    int i;
    int *result;
    int *temp;

    i = 0;
    result = ft_make_zero_str(1100);
    temp = ft_copy_array(x);
    result = ft_difference_long_arithmetic(x, y);
    x = ft_copy_array(temp);
    while(i < 1100)
    {
        if (result[i] < 0)
            return (0);
        i++;
    }
    return (1);
}

int *ft_multiplication(const int *x, const int *y)
{
    int i;
    int j;
    int *result;

    i = 0;
    result = ft_make_zero_str(1100);
    while (y[i] == 0)
        i++;
    j = 1099;
    while (j >= i)
    {
        result[j] = result[j] + y[j] * x[1099];
        if (result[j] > 10)
        {
            result[j - 1] = result[j] / 10;
            result[j] = result[j] % 10;
        }
        j--;
    }
    return (result);
}

int ft_work(int *x)
{
    int i;

    i = 0;
    while(x[i] == 0 && i < 1100)
        i++;
    if (i == 1100)
        return (0);
    else
        return (1);
}

int ft_number_selection(int *x, int *y)
{
    int i;
    int *res_mult;

    i = 1;
    res_mult = ft_make_zero_str(1100);
    while (ft_comparison(x, res_mult) > 0)
    {
        res_mult = ft_make_zero_str(1100);
        res_mult[1099] = i;
        res_mult = ft_multiplication(res_mult, y);
        if (ft_comparison(x, res_mult) > 0)
            i++;
        else
            break;
    }
    return (i);
}

int *ft_multiplication_new(int i, int *y)
{
    int *result;

    result = ft_make_zero_str(1100);
    result[1099] = i;
    result = ft_multiplication(result, y);
    return (result);
}
int    *ft_division_long_arithmetic(int *x, int *y)
{
    int *result_divider;
    int len;
    int *res_mult;
    int len_sdwig;
    int i;
    int j;

    j = 0;
    len = (ft_array_length(y) - ft_array_length(x));
    len_sdwig = len;
    x = ft_shift_elements_left(x, len);
    result_divider = ft_make_zero_str(1100);
    while(ft_work(x) > 0)
    {
        if (result_divider[j] == 999)
        {
            result_divider[j] = 0;
            j++;
        }
        len = (ft_array_length(y) - ft_array_length(x));
        x = ft_shift_elements_left(x, len);
        if (ft_comparison(x, y) < 1 && len == 0)
            x = ft_shift_elements_left(x, 1);
        if ((ft_comparison(x, y) < 1 || len >= 1))
        {
            result_divider[j + 1] = 999;
            j = j + 1;
            x = ft_shift_elements_left(x, 1);
        }
        i = ft_number_selection(x, y);
        result_divider[j] = i - 1;
        res_mult = ft_multiplication_new(i - 1, y);
        x = ft_difference_long_arithmetic(x, ft_difference_long_arithmetic(res_mult, y));
        j++;
    }
    result_divider = ft_delete_zero(result_divider);
    ft_shift_elements_right(result_divider, len_sdwig);
    return (result_divider);
}

int main()
{
    int *a;
    int *b;
    int *c;                                                                 // результат вычитания

    int i;
    int j;

    i = 1100;
    j = 0;
    a = ft_make_zero_str(1100);
    b = ft_make_zero_str(1100);
    c = ft_make_zero_str(1100);
    a[1099] = 1;                                                            // 1 число из него вычитают
    a[1098] = 0;
    a[1097] = 0;
    a[1096] = 0;
    a[1095] = 0;
    a[1094] = 0;
    a[1093] = 0;


    b[1099] = 6;                                                            // 2 число (зеркально)
    b[1098] = 7;
    b[1097] = 5;
    b[1096] = 8;
    b[1095] = 4;
    b[1094] = 0;
    b[1093] = 1;

    c = ft_division_long_arithmetic (a, b);                               // запуск функции вычитания длинной арифметики

    while(c[i] == 0 && i >= 0)
        i--;
    j = 0;
    while(j <= i)                                                         // вывод по-символьно полученного результата
    {
        printf("%d", c[j]);
        j++;
    }
    return 0;
}

/*
 while (ft_comparison(x,for_mult) > 0)
        {
            for_mult = ft_make_zero_str(1100);
            for_mult[1099] = i;
            temp = ft_multiplication(for_mult, y);
            temp2 = ft_copy_array(x);
            for_mult = ft_difference_long_arithmetic(x, temp);
            x = ft_copy_array(temp2);
            temp = ft_copy_array(for_mult);
            if (ft_comparison(for_mult, y) > 0)
            {
                for_mult = ft_copy_array(temp);
                i++;
            }
            else
            {
                y = ft_copy_array(temp);
                break;
            }
}
        */